#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

// Implementation of the GLSL mod() function, which is slightly different than Metal fmod()
template<typename Tx, typename Ty>
inline Tx mod(Tx x, Ty y)
{
    return x - y * floor(x / y);
}

constant spvUnsafeArray<float, 64> _100 = spvUnsafeArray<float, 64>({ 0.0, 0.5, 0.125, 0.625, 0.03125, 0.53125, 0.15625, 0.65625, 0.75, 0.25, 0.875, 0.375, 0.78125, 0.28125, 0.90625, 0.40625, 0.1875, 0.6875, 0.0625, 0.5625, 0.21875, 0.71875, 0.09375, 0.59375, 0.9375, 0.4375, 0.8125, 0.3125, 0.96875, 0.46875, 0.84375, 0.34375, 0.046875, 0.546875, 0.171875, 0.671875, 0.015625, 0.515625, 0.140625, 0.640625, 0.796875, 0.296875, 0.921875, 0.421875, 0.765625, 0.265625, 0.890625, 0.390625, 0.234375, 0.734375, 0.109375, 0.609375, 0.203125, 0.703125, 0.078125, 0.578125, 0.984375, 0.484375, 0.859375, 0.359375, 0.953125, 0.453125, 0.828125, 0.328125 });

struct main0_out
{
    float depth [[color(0)]];
    float4 fragColor [[color(1)]];
    float4 fragNormalOut [[color(2)]];
    float4 fragPosOut [[color(3)]];
};

struct main0_in
{
    float3 fragPos [[user(locn0)]];
    float3 fragNormal [[user(locn1)]];
    float2 fragUV [[user(locn2)]];
    float4 fragUPos [[user(locn3)]];
};

static inline __attribute__((always_inline))
float dither(thread const float2& p, thread const float& a)
{
    int index = (int(mod(p.y, 8.0)) * 8) + int(mod(p.x, 8.0));
    float threshold = _100[index];
    return float(a > threshold);
}

fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex [[texture(0)]], sampler texSmplr [[sampler(0)]], float4 gl_FragCoord [[position]])
{
    main0_out out = {};
    float4 textureColor = tex.sample(texSmplr, in.fragUV);
    float2 param = gl_FragCoord.xy;
    float param_1 = textureColor.w;
    if (dither(param, param_1) < 0.5)
    {
        discard_fragment();
    }
    out.fragColor = textureColor;
    out.fragNormalOut = float4((in.fragNormal / float3(2.0)) + float3(0.5), 1.0);
    out.depth = in.fragUPos.z;
    out.fragPosOut = float4(in.fragPos, 1.0);
    return out;
}

